---
description: 
globs: 
alwaysApply: true
---

# API Guidelines
- These rules are to give examples of how to build and consume the api from a user standpoint.

# Schema
```rust
		use uuid::Uuid;
		use serde::{Deserialize, Serialize};
		use drizze_rs::prelude::*;

		#[SQLiteTable(strict, without_rowid)]
		pub struct Users {
			#[integer(primary, default_fn = Uuid::new_v4 )]
			id: Uuid,
			#[text]
			email: String
			#[text(default = "Hello!")]
			description: Option<String>,
			#[text]
			text_data: UserData,
			#[blob]
			blob_data: UserData,
			#[text]
			role: Roles,
		}

		#[derive(Serialize, Deserialize, Debug)]
		pub struct UserData {
			age: i64,
			name: String,
		}

		#[derive(SQLiteEnum, Debug, Default)]
		pub enum Roles {
			#[default]
			User,
			Maintainer,
			Admin,
		}

    #[SQLiteTable]
		pub struct Followers {
			#[integer(primary, references = Users::id )]
			follower_id: Uuid,
			#[integer(primary, references = Users::id )]
			followee_id: Uuid,
		}

		#[SQLiteTable]
		pub struct Profile {
			#[integer(primary, default_fn = Uuid::new_v4 )]
			id: Uuid,
			#[integer(references = Users::id )]
			users_id: Uuid,
			#[integer]
			likes: i64,
		}
```

# QueryBuilder
- API examples for QueryBuilder, using the examples above for Schema

```rust
  fn main(){
		let qb = schema!([Users, Followers]);

		let uid = Uuid::new_v4();

		// SELECT * FROM USERS WHERE 'Users.id' = ?
		let sql = qb.select(columns!()).from::<Users>().r#where(eq(Users::id, uid)).to_sql();

		// SELECT Users.id, Users.email FROM USERS WHERE 'Users.id' = ?
		let sql = qb.select(columns!(Users::id, Users::email)).from::<Users>().r#where(eq(Users::id, uid)).to_sql();

		// compile time Error because wrong type for comparison with Users::id
		let sql2 = qb.select(columns!()).from::<Users>().r#where(eq(Users::id, 64)).to_sql();
	}
```

# Drizzle
- API examples for using the drizzle! macro to use a connection with schema that auto calls and returns the sql/data/rows. Again, we use the examples above along with this.

```rust
	fn main(){
		let conn = rusqlite::Connection::open_in_memory()?;
		let db = drizzle!(rustqlite::Connection::open_in_memory, [Users, Followers]);
		// OR
		let db = drizzle!(conn, [Users, Followers, Profiles]);

		let uid = Uuid::new_v4();

		// Returns Result<SelectUsers>.
		// SelectUsers is built from the `SQLiteTable` macro along with `InsertUsers` because the types are different and depends on if columns have defaults, and/or not null etc.
		let result = db.select(columns!()).from::<Users>().where(eq(Users::id, uid)).all()?;
	}
```


