name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Wait for CI to complete on the tag
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    steps:
    - name: Wait for CI workflow
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.ref }}
        check-name: 'Test'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10

  get-rust-version:
    name: Get Version Info
    runs-on: ubuntu-latest
    needs: wait-for-ci
    outputs:
      rust-version: ${{ steps.rust-version.outputs.version }}
      release-version: ${{ steps.release-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract Rust version from Cargo.toml
      id: rust-version
      run: |
        RUST_VERSION=$(grep '^rust-version = ' Cargo.toml | sed 's/rust-version = "\(.*\)"/\1/')
        echo "version=$RUST_VERSION" >> $GITHUB_OUTPUT
        echo "Detected Rust version: $RUST_VERSION"
    
    - name: Extract release version from tag
      id: release-version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    needs: get-rust-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Check tag matches Cargo.toml
      run: |
        TAG_VERSION="${{ needs.get-rust-version.outputs.release-version }}"
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "❌ Version mismatch: tag v$TAG_VERSION != Cargo.toml $CARGO_VERSION"
          exit 1
        fi
        
        echo "✅ Version validation passed: $TAG_VERSION"

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [get-rust-version, validate-version]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Install cargo-workspaces
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-workspaces
    
    - name: Publish workspace crates
      run: |
        echo "Publishing drizzle_rs v${{ needs.get-rust-version.outputs.release-version }}..."
        cargo workspaces publish --from-git --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --yes

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [get-rust-version, publish]
    if: success()
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      run: |
        TAG_NAME="v${{ needs.get-rust-version.outputs.release-version }}"
        
        # Get previous tag for changelog
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREV_TAG..HEAD)
        fi
        
        cat > release_notes.md << EOF
        ## Changes
        
        $COMMITS
        
        ## Features Tested
        - ✅ **rusqlite** with uuid, serde feature combinations
        - ✅ **libsql** with uuid, serde feature combinations  
        - ⚠️ **turso** (experimental, tested in CI)
        
        ## Installation
        
        \`\`\`toml
        [dependencies]
        drizzle_rs = "${{ needs.get-rust-version.outputs.release-version }}"
        \`\`\`
        
        Or with specific features:
        \`\`\`toml
        [dependencies]
        drizzle_rs = { version = "${{ needs.get-rust-version.outputs.release-version }}", features = ["rusqlite", "uuid", "serde"] }
        \`\`\`
        EOF
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.get-rust-version.outputs.release-version }}
        release_name: Release v${{ needs.get-rust-version.outputs.release-version }}
        body_path: release_notes.md
        draft: false
        prerelease: false