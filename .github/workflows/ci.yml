name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  get-rust-version:
    name: Get Rust Version
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Extract Rust version from Cargo.toml
      id: rust-version
      run: |
        RUST_VERSION=$(grep '^rust-version = ' Cargo.toml | sed 's/rust-version = "\(.*\)"/\1/')
        echo "version=$RUST_VERSION" >> $GITHUB_OUTPUT
        echo "Detected Rust version: $RUST_VERSION"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: get-rust-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy (rusqlite)
      run: cargo clippy --features "rusqlite,uuid,serde" -- -D warnings
    
    - name: Run clippy (libsql)
      run: cargo clippy --features "libsql,uuid,serde" -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [get-rust-version, lint]
    strategy:
      fail-fast: false
      matrix:
        driver: [rusqlite, libsql]
        features:
          - ""
          - "uuid"
          - "serde"
          - "uuid,serde"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build features matrix
      id: features
      run: |
        if [ -z "${{ matrix.features }}" ]; then
          FEATURES="${{ matrix.driver }}"
        else
          FEATURES="${{ matrix.driver }},${{ matrix.features }}"
        fi
        echo "features=$FEATURES" >> $GITHUB_OUTPUT
        echo "Testing with features: $FEATURES"
    
    - name: Run tests - ${{ matrix.driver }} with ${{ matrix.features || 'default' }}
      run: cargo test --workspace --features "${{ steps.features.outputs.features }}" --verbose
    
    - name: Run examples - ${{ matrix.driver }} with ${{ matrix.features || 'default' }}
      run: cargo run --example rusqlite --features "${{ steps.features.outputs.features }}"

  test-turso-experimental:
    name: Test Turso (Experimental)
    runs-on: ubuntu-latest
    needs: [get-rust-version, lint]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        features:
          - "turso"
          - "turso,uuid"
          - "turso,serde"
          - "turso,uuid,serde"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Run tests - turso with ${{ matrix.features }}
      run: |
        echo "::notice::Testing turso with features: ${{ matrix.features }}"
        if cargo test --workspace --features "${{ matrix.features }}" --verbose; then
          echo "::notice::✅ Turso tests passed with features: ${{ matrix.features }}"
        else
          echo "::warning::❌ Turso tests failed with features: ${{ matrix.features }} (experimental - not blocking)"
          exit 0
        fi

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [get-rust-version, lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check documentation
      run: cargo doc --features "rusqlite,uuid,serde" --no-deps --document-private-items

  build-check:
    name: Build Check (stable/beta/nightly)
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        driver: [rusqlite, libsql]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build with ${{ matrix.driver }}
      run: cargo build --features "${{ matrix.driver }},uuid,serde"

  minimum-versions:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    needs: [get-rust-version, lint]
    strategy:
      matrix:
        driver: [rusqlite, libsql]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check MSRV with ${{ matrix.driver }}
      run: cargo check --features "${{ matrix.driver }},uuid,serde"
