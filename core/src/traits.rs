use crate::{SQLSchemaType, ToSQL};

/// A marker trait for types that can be used as SQL parameters.
///
/// This trait is used as a bound on the parameter type in SQL fragments.
/// It ensures type safety when building SQL queries with parameters.
pub trait SQLParam: Clone + std::fmt::Debug {}

// Implement SQLParam for common types
impl SQLParam for String {}
impl SQLParam for &str {}
impl SQLParam for i8 {}
impl SQLParam for i16 {}
impl SQLParam for i32 {}
impl SQLParam for i64 {}
impl SQLParam for isize {}
impl SQLParam for u8 {}
impl SQLParam for u16 {}
impl SQLParam for u32 {}
impl SQLParam for u64 {}
impl SQLParam for usize {}
impl SQLParam for f32 {}
impl SQLParam for f64 {}
impl SQLParam for bool {}
impl<T: SQLParam> SQLParam for Option<T> {}
impl<T: SQLParam> SQLParam for Vec<T> {}
impl<T: SQLParam> SQLParam for &[T] {}
impl<T: SQLParam> SQLParam for &T {}
impl<const N: usize, T: SQLParam> SQLParam for [T; N] {}

pub trait SQLSchema<'a, T> {
    const NAME: &'a str;
    const TYPE: T;
    const SQL: &'a str;
}

pub trait SQLColumn<'a, Value: SQLParam> {
    type Table: SQLTable<'a, Value>;
    type Type: TryInto<Value>;
    type Schema: SQLSchema<'a, &'a str>;

    const PRIMARY_KEY: bool = false;
    const NOT_NULL: bool = false;
    const UNIQUE: bool = false;
    const DEFAULT: Option<Self::Type>;

    fn default_fn() -> Option<impl Fn() -> Self::Type> {
        None::<fn() -> Self::Type>
    }
}

/// A marker trait to ensure a type is a tuple of `SQLColumn`s.
pub trait ColumnsTuple<'a, Value: SQLParam> {}

// A macro to implement ColumnsTuple for tuples of various sizes.
macro_rules! impl_columns_tuple {
    ( $(($($T:ident),*);)+ ) => {
        $(

            impl<'a, Value: SQLParam, $($T),*> ColumnsTuple<'a, Value> for ($($T,)*)
            where
                $($T: SQLColumn<'a, Value>,)*
            {}
        )+
    };
}

// Implement for tuples up to size 6.
impl_columns_tuple! {
    (T1);
    (T1, T2);
    (T1, T2, T3);
    (T1, T2, T3, T4);
    (T1, T2, T3, T4, T5);
    (T1, T2, T3, T4, T5, T6);
}

pub trait SQLTable<'a, Value: SQLParam> {
    type Columns: ColumnsTuple<'a, Value>;
    /// The type representing a model for SELECT operations on this table.
    /// This would be generated by the table macro.
    type Select: ToSQL<'a, Value>;

    /// The type representing a model for INSERT operations on this table.
    /// This would be generated by the table macro.
    type Insert: ToSQL<'a, Value>;

    /// The type representing a model for UPDATE operations on this table.
    /// This would be generated by the table macro.
    type Update: ToSQL<'a, Value>;
    type Schema: SQLSchema<'a, SQLSchemaType>;

    const COLUMNS: Self::Columns;
}

/// Marker trait indicating that a table `T` is part of a schema represented by the marker type `S`.
///
/// This trait is used as a bound on methods like `QueryBuilder::from` and `QueryBuilder::join`
/// to ensure that only tables declared within a specific `schema!` macro invocation can be used
/// with the resulting query builder.
///
/// ## Compile-Time Errors
///
/// If you encounter a compile-time error message like:
/// ```text
/// the trait bound `YourTable: querybuilder::core::schema_traits::IsInSchema<...some_marker_module::SchemaMarker>` is not satisfied
/// ```
/// **This almost always means that `YourTable` was not included in the list of tables when the corresponding `schema!` macro was called.**
///
/// For example:
/// ```compile_fail
/// # use querybuilder::prelude::*;
/// # use querybuilder::sqlite::query_builder::{QueryBuilder, SQLiteQueryBuilder};
/// # use procmacros::SQLiteTable;
/// # #[SQLiteTable(name = "users")] struct User { id: i32 };
/// # #[SQLiteTable(name = "posts")] struct Post { id: i32 };
/// // Schema only includes User
/// let qb = querybuilder::schema!([User]);
///
/// // This line will FAIL because Post is not in the schema:
/// let posts = qb.from::<Post>().select_all(); // <-- Error happens here
/// ```
///
/// To fix this, ensure that `YourTable` is listed within the `[...]` of the `schema!` macro call
/// that created the query builder instance you are trying to use.
///
/// Implementations of this trait are generated automatically by the `schema!` macro for each table
/// listed within it, associating those tables with the unique, generated schema marker type `S`.
pub trait IsInSchema<S> {}
